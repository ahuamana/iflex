---
interface Props {
  id: string;
}

const { id } = Astro.props;
---

<div id={id} class="image-modal">
  <div class="modal-overlay"></div>
  <div class="modal-content glass-effect">
    <button class="close-button" aria-label="Close modal">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
    <div class="image-container">
      <img src="" alt="Enlarged view" class="modal-image" />
    </div>
  </div>
</div>

<style>
  .image-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1000;
    display: none;
    align-items: center;
    justify-content: center;
  }

  .image-modal.active {
    display: flex;
    animation: fadeIn 0.3s ease-out;
  }

  .modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(8px);
  }

  .modal-content {
    position: relative;
    max-width: 90%;
    max-height: 90vh;
    margin: 20px;
    border-radius: 20px;
    overflow: hidden;
    z-index: 1;
    transform: scale(0.95);
    opacity: 0;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .image-modal.active .modal-content {
    transform: scale(1);
    opacity: 1;
  }

  .image-container {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .modal-image {
    max-width: 100%;
    max-height: 90vh;
    object-fit: contain;
    border-radius: 12px;
  }

  .close-button {
    position: absolute;
    top: 20px;
    right: 20px;
    background: rgba(255, 255, 255, 0.1);
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    color: white;
    backdrop-filter: blur(4px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    transition: all 0.3s ease;
  }

  .close-button:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: scale(1.1);
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
</style>

<script>
  class ImageModal {
    constructor(modalId) {
      this.modal = document.getElementById(modalId);
      this.closeButton = this.modal.querySelector('.close-button');
      this.modalImage = this.modal.querySelector('.modal-image');
      this.setupEventListeners();
    }

    setupEventListeners() {
      this.closeButton.addEventListener('click', () => this.close());
      this.modal.addEventListener('click', (e) => {
        if (e.target === this.modal) this.close();
      });
    }

    open(imageUrl) {
      this.modalImage.src = imageUrl;
      this.modal.classList.add('active');
      document.body.style.overflow = 'hidden';
    }

    close() {
      this.modal.classList.remove('active');
      document.body.style.overflow = '';
    }
  }

  // Initialize the modal
  const modal = new ImageModal('imageModal');

  // Add click listeners to all analysis images
  document.querySelectorAll('.analysis-image').forEach(image => {
    image.addEventListener('click', () => {
      modal.open(image.src);
    });
  });
</script>